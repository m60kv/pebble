/** Shopify CDN: Minification failed

Line 26:2 Transforming class syntax to the configured target environment ("es5") is not supported yet
Line 27:15 Transforming object literal extensions to the configured target environment ("es5") is not supported yet
Line 43:13 Transforming object literal extensions to the configured target environment ("es5") is not supported yet
Line 52:20 Transforming object literal extensions to the configured target environment ("es5") is not supported yet
Line 59:15 Transforming object literal extensions to the configured target environment ("es5") is not supported yet
Line 61:6 Transforming const to the configured target environment ("es5") is not supported yet
Line 66:16 Transforming object literal extensions to the configured target environment ("es5") is not supported yet
Line 76:17 Transforming object literal extensions to the configured target environment ("es5") is not supported yet
Line 77:6 Transforming const to the configured target environment ("es5") is not supported yet
Line 92:2 Transforming class syntax to the configured target environment ("es5") is not supported yet
... and 13 more hidden warnings

**/
(function() {
  var __sections__ = {};
  (function() {
    for(var i = 0, s = document.getElementById('sections-script').getAttribute('data-sections').split(','); i < s.length; i++)
      __sections__[s[i]] = true;
  })();
  (function() {
  if (!__sections__["footer"]) return;
  try {
    
  class LocalizationForm extends HTMLElement {
    constructor() {
      super();

      this.elements = {
        input: this.querySelector('input[name="locale_code"], input[name="country_code"]'),
        button: this.querySelector('button'),
        panel: this.querySelector('ul'),
      };
      
      this.elements.button.addEventListener('click', this.openSelector.bind(this));
      this.elements.button.addEventListener('focusout', this.closeSelector.bind(this));
      this.addEventListener('keyup', this.onContainerKeyUp.bind(this));

      this.querySelectorAll('a').forEach(item => item.addEventListener('click', this.onItemClick.bind(this)));
    }

    hidePanel() {
      this.elements.button.setAttribute('aria-expanded', 'false');
      this.elements.panel.setAttribute('hidden', true);

      if (this.classList.contains('on-header')) {
        document.body.classList.remove('localization--open');
      }
    }

    onContainerKeyUp(event) {
      if (event.code.toUpperCase() !== 'ESCAPE') return;

      this.hidePanel();
      // this.elements.button.focus();
    }

    onItemClick(event) {
      event.preventDefault();
      const form = this.querySelector('form');
      this.elements.input.value = event.currentTarget.dataset.value;
      if (form) form.submit();
    }

    openSelector() {
      // this.elements.button.focus();
      this.elements.panel.toggleAttribute('hidden');
      this.elements.button.setAttribute('aria-expanded', (this.elements.button.getAttribute('aria-expanded') === 'false').toString());

      if (this.classList.contains('on-header')) {
        document.body.classList.toggle('localization--open');
      }
    }

    closeSelector(event) {
      const shouldClose = event.relatedTarget && event.relatedTarget.nodeName === 'BUTTON';
      if (event.relatedTarget === null || shouldClose) {
        this.hidePanel();
      }
    }
  }
  customElements.define('localization-form', LocalizationForm);

  } catch(e) { console.error(e); }
})();

(function() {
  if (!__sections__["header"]) return;
  try {
    
  class StickyHeader extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      this.header = document.getElementById('shopify-section-header');
      this.headerBounds = {};
      this.currentScrollTop = 0;
      this.preventReveal = false;
      this.scrollUpActive = false;

      this.onScrollHandler = this.onScroll.bind(this);
      this.hideHeaderOnScrollUp = () => this.preventReveal = true;

      this.addEventListener('preventHeaderReveal', this.hideHeaderOnScrollUp);
      window.addEventListener('scroll', this.onScrollHandler, false);

      this.createObserver();
    }

    disconnectedCallback() {
      this.removeEventListener('preventHeaderReveal', this.hideHeaderOnScrollUp);
      window.removeEventListener('scroll', this.onScrollHandler);
    }

    createObserver() {
      let observer = new IntersectionObserver((entries, observer) => {
        this.headerBounds = entries[0].intersectionRect;

        if (this.headerBounds.top === 0 && this.headerBounds.bottom === 0) {
          const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
          const boundingClientRect = entries[0].boundingClientRect;

          this.headerBounds = {
            top: scrollTop + boundingClientRect.top,
            bottom: scrollTop + boundingClientRect.bottom
          };
        }

        if (this.dataset.scrollUp !== undefined) {
          this.scrollUpActive = true;
        }

        observer.disconnect();
      });

      observer.observe(this.header);
    }

    onScroll() {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

      if (theme.config.mqlSmall || this.scrollUpActive) {
        if (scrollTop > this.currentScrollTop && scrollTop > this.headerBounds.bottom) {
          requestAnimationFrame(this.hide.bind(this));
        }
        else if (scrollTop < this.currentScrollTop && scrollTop > this.headerBounds.bottom) {
          if (!this.preventReveal) {
            requestAnimationFrame(this.reveal.bind(this));
          }
          else {
            window.clearTimeout(this.isScrolling);

            this.isScrolling = setTimeout(() => {
              this.preventReveal = false;
            }, 66);

            requestAnimationFrame(this.hide.bind(this));
          }
        }
        else if (scrollTop <= this.headerBounds.top) {
          requestAnimationFrame(this.reset.bind(this));
        }
      }
      else {
        if (scrollTop > this.headerBounds.bottom) {
          if (this.sticky()) return;
          
          requestAnimationFrame(this.hide.bind(this));

          setTimeout(() => {
            requestAnimationFrame(this.reveal.bind(this));
          }, 100);
        }
        else if (scrollTop <= this.headerBounds.top) {
          requestAnimationFrame(this.reset.bind(this));
        }
      }

      this.currentScrollTop = scrollTop;
    }

    hide() {
      this.header.classList.add('shopify-section-header-hidden', 'shopify-section-header-sticky');
    }

    reveal() {
      this.header.classList.add('shopify-section-header-sticky', 'animate');
      this.header.classList.remove('shopify-section-header-hidden');
    }

    reset() {
      this.header.classList.remove('shopify-section-header-hidden', 'shopify-section-header-sticky', 'animate');
    }

    sticky() {
      return this.header.classList.contains('shopify-section-header-sticky') && !this.header.classList.contains('shopify-section-header-hidden');
    }
  }
  customElements.define('sticky-header', StickyHeader);

  } catch(e) { console.error(e); }
})();

})();
